---
- name: Find golang tags
  when: golang_version is not defined
  ansible.builtin.command: git ls-remote --sort="-version:refname" --tags https://github.com/golang/go.git
  register: golang_tags

- name: Set golang version
  when: golang_version is not defined
  set_fact:
    golang_version: "{{golang_tags.stdout | regex_search('go([0-9]+\\.){2}[0-9]+') }}"

- name: Check current golang version
  command: go version
  register: go_output
  ignore_errors: true
  changed_when: False

- name: Set current golang version
  when: go_output is succeeded
  set_fact:
    current_golang_version: "{{ go_output.stdout_lines[0] | regex_search('go([0-9]+\\.){2}[0-9]+') }}"

- name: Remove old golang installation
  when: current_golang_version | default('none') != golang_version
  become: true
  ansible.builtin.file:
    path: /usr/local/go
    state: absent

- name: Download golang
  when: current_golang_version | default('none') != golang_version
  get_url:
    url: "https://golang.org/dl/{{ golang_version }}.linux-amd64.tar.gz"
    dest: /tmp/{{ golang_version }}.tar.gz

- name: Extract and install golang
  when: current_golang_version | default('none') != golang_version
  become: true
  unarchive:
    src: /tmp/{{ golang_version }}.tar.gz
    dest: /usr/local/
    remote_src: true

- name: Add go to path
  become: false
  blockinfile:
    content: |
      # Golang
      export PATH=$PATH:/usr/local/go/bin:/home/{{ ansible_user_id }}/go/bin
    path: /home/{{ ansible_user_id }}/.bashrc
    marker: "# {mark} ANSIBLE MANAGED BLOCK GOLANG"
